/*
 * This file is part of Molina.
 * 
 * Molina is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version
 * 3 of the License, or (at your option) any later version.
 *
 * Molina is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/*
 *   This file implements a bitboard data structure.
 *
 *   Although it is typically considered poor programming practice,
 *   the bitboard will be composed of global variables.  This is in
 *   keeping with the practice of Stockfish and enables faster execution
 *   and less memory requirements
 */

#ifndef BITBOARD_HPP
#define BITBOARD_HPP

#include "types.hpp"
#include "movegen.hpp"

#include <array>
#include <iostream>
#include <string>
#include <math.h>
#include <assert.h>
#include <bitset>


array<u64, 12> board;

// various flags
array<bool, 4> castle; // convention: 0 = a1, 1 = h1, 2 = a8, 3 = h8
u64 enPassant;


/*
 * Initializes bitboard to default starting position for chess
 */
void init_bitboard()
{
    board[wPawn]   = 0b00000000'00000000'00000000'00000000'00000000'00000000'11111111'00000000;
    board[wRook]   = 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'10000001;
    board[wKnight] = 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'01000010;
    board[wBishop] = 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00100100;
    board[wQueen]  = 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00010000;
    board[wKing]   = 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00001000;

    board[bPawn]   = 0b00000000'11111111'00000000'00000000'00000000'00000000'00000000'00000000;
    board[bRook]   = 0b10000001'00000000'00000000'00000000'00000000'00000000'00000000'00000000;
    board[bKnight] = 0b01000010'00000000'00000000'00000000'00000000'00000000'00000000'00000000;
    board[bBishop] = 0b00100100'00000000'00000000'00000000'00000000'00000000'00000000'00000000;
    board[bQueen]  = 0b00001000'00000000'00000000'00000000'00000000'00000000'00000000'00000000;
    board[bKing]   = 0b00010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000;

    castle.fill(true);
    enPassant = 0;

}

/*
 *  Given a square's rank and file,
 *  return the u64 corresponding
 *  to that square
 */
u64 find_square(const int rank, const int file)
{
    return pow(2, 8*rank + file);
}

/*
 *  Given a string representing a square,
 *  i.e. "e6", return the u64 corresponding
 *  to that square
 */
u64 find_square(const string square)
{
    assert(square.length() == 2);
    int rank = (int)(square[1])-49; // Convert from ascii table
    int file = (int)(square[0])-97; // Convert from ascii table
    return find_square(rank, file);
}

/*
 * Given a square, determine which
 * type of pice lies on it
 */
int find_piece_on_square(const u64 square)
{
    // White
    if(square & board[wPawn])
        return wPawn;
    else if(square & board[wRook])
        return wRook;
    else if(square & board[wKnight])
        return wKnight;
    else if(square & board[wBishop])
        return wBishop;
    else if(square & board[wQueen])
        return wQueen;
    else if(square & board[wKing])
        return wKing;
    // Black
    else if(square & board[bPawn])
        return bPawn;
    else if(square & board[bRook])
        return bRook;
    else if(square & board[bKnight])
        return bKnight;
    else if(square & board[bBishop])
        return bBishop;
    else if(square & board[bQueen])
        return bQueen;
    else if(square & board[bKing])
        return bKing;
    return none;
}

/*
 *  Move based on long algebraic notation as in UCI
 *  - e2e4 moves the piece on e2 to the square e4
 *  - e7e5 is white short castling
 *  - e7e8q is pawn promotion to queen
 */
bool make_move(const string move)
{
    // TODO: Check that move is legal
    // TODO: Handle captures
    cout << "Making move " << move << endl;
    u64 from_square = find_square(move.substr(0,2));
    u64 to_square = find_square(move.substr(2,2));
    int piece_to_move = find_piece_on_square(from_square);
    if(piece_to_move == none){
        cout << "No piece on square to move!\n";
        cout << "Attempted movement: " << move << endl;
        return false;
    }
    board[piece_to_move] -= from_square;
    board[piece_to_move] += to_square;
    return true;
}

/*
 *  Prints to std out for debugging
 */
void print_bitboard()
{
    cout << "\n  +----+----+----+----+----+----+----+----+ " << endl;
    for(int rank=7; rank>=0; --rank)
    {
        cout << rank+1 << " ";
        for(int file=0; file<8; ++file)
        {
            u64 pos = find_square(rank, file);
            pos &= north_mask[20];
            // White pieces
            if(pos & board[wPawn])
                cout << "| wP ";
            else if(pos & board[wRook])
                cout << "| wR ";
            else if(pos & board[wKnight])
                cout << "| wN ";
            else if(pos & board[wBishop])
                cout << "| wB ";
            else if(pos & board[wQueen])
                cout << "| wQ ";
            else if(pos & board[wKing])
                cout << "| wK ";
            // Black pieces
            else if(pos & board[bPawn])
                cout << "| bP ";
            else if(pos & board[bRook])
                cout << "| bR ";
            else if(pos & board[bKnight])
                cout << "| bN ";
            else if(pos & board[bBishop])
                cout << "| bB ";
            else if(pos & board[bQueen])
                cout << "| bQ ";
            else if(pos & board[bKing])
                cout << "| bK ";
            else
                cout << "|    ";
        }
        cout << "|\n  +----+----+----+----+----+----+----+----+ " << endl;
    }
    cout << "    A    B    C    D    E    F    G    H\n\n";
}


#endif // BITBOARD_HPP
